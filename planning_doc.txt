Required elements

FileIO
  Save game directory (git ignore?)
Serializer
  Position
  Move history
Gameboard class
  8x8 2D array
Square class?
  color
  coordinate: does a square know where it is?
  edges: does a square point to adjacent squares?
  occupant
Player class
Piece class
  Name
  Move pattern

Piece Library (Module?)
Piece Key?  N = Knight, K = King, etc

ConsoleUI
  #display_board

Move Validation
Build an array of all possible legal moves
  * use start_square, board
  * use piece.moves data to collect all possible end_squares
    - move: blocked by any piece
    - capture: blocked by self or empty square
    - move_or_capture: blocked by self
    - castle: complex conditions
    - en_passent: complex conditions
  * save start_square, end_squares, new_position, capture/promote 
  * evaluate each new_position and remove self-checks from arry of legal moves
Return "Invalid move" if the legal_moves array doesn't include players' inputted end_square


Player enters a move
Move is passed to Gameboard
Move is processed
  * invalid move returns to player input
  * valid move updates movelist and board position

Move_types: Invalid, Valid, Move, Capture, Castle, En_passent
Data required: gameboard, movelist, piece type
Move Processing
  Piece captured?
  Update piece location
  Check new position for:
    Check -> checkmate
    Stalemate

Git ignore saved games

Todo: Square color

