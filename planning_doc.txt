Required elements

FileIO
  Save game directory (git ignore?)
Serializer
  Position
  Move history
Gameboard class
  8x8 2D array
Square class?
  color
  coordinate: does a square know where it is?
  edges: does a square point to adjacent squares?
  occupant
Player class
Piece class
  Name
  Move pattern

Piece Library (Module?)
Piece Key?  N = Knight, K = King, etc

ConsoleUI
  #display_board

player_move(start, land)
  move_piece(start, land) if valid_move?(start, land)
end

move_piece(start, land)
  gameboard(land) == gameboard(start)
  update_movelist
  update_othershit(castling, player turn, en passant, movecounts)
end

valid_move?(start, land)
  moves = []
  piece.get_moves.each do
    moves << land if condition list met
  end

Move Validation

legal_moves = []
MOVES.each do
  loop move while repeat && current.nil?
    1. Generate valid target square using piece.moves
    # 2. Generate new position after move.
    # 3. Is the resulting position valid?
    #   - own king is not in check
    4. legal_moves << target
  end
end
  5. return array.include? target

Update the position, or return false?


Return "Invalid move" if the legal_moves array doesn't include players' inputted end_square


Player enters a move
Move is passed to Gameboard
Move is processed
  * invalid move returns to player input
  * valid move updates movelist and board position

Move_types: Invalid, Valid, Move, Capture, Castle, En_passent
Data required: gameboard, movelist, piece type
Move Processing
  Piece captured?
  Update piece location
  Check new position for:
    Check -> checkmate
    Stalemate

Git ignore saved games

Todo: Square color

